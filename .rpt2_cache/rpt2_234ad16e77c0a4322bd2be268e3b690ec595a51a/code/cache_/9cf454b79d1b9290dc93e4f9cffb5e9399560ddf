{"code":"import * as tslib_1 from \"tslib\";\r\nimport { AdventEvent } from './event';\r\nexport var AdventLoggerLevels;\r\n(function (AdventLoggerLevels) {\r\n    AdventLoggerLevels[\"debug\"] = \"debug\";\r\n    AdventLoggerLevels[\"trace\"] = \"trace\";\r\n    AdventLoggerLevels[\"info\"] = \"info\";\r\n    AdventLoggerLevels[\"warn\"] = \"warn\";\r\n    AdventLoggerLevels[\"error\"] = \"error\";\r\n    AdventLoggerLevels[\"fatal\"] = \"fatal\";\r\n})(AdventLoggerLevels || (AdventLoggerLevels = {}));\r\nvar AdventLogger = /** @class */ (function () {\r\n    function AdventLogger(store, meta, tags) {\r\n        /**\r\n         *\r\n         * @description Metadata to be passed to each Event instance generated\r\n         * during a log event.\r\n         * @property {AdventMeta} [meta={}]\r\n         */\r\n        this.meta = {};\r\n        /**\r\n         *\r\n         * @description String tags that are indexed when logging\r\n         * @property {string[]} tags\r\n         */\r\n        this.tags = [];\r\n        this.store = store;\r\n        if (meta) {\r\n            this.meta = meta;\r\n        }\r\n        if (tags) {\r\n            this.tags = tags;\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * @param {object} params\r\n     * @param {AdventEventStore} params.store\r\n     * @param {object} params.meta\r\n     * @param {string[]} params.tags\r\n     * @constructor\r\n     */\r\n    AdventLogger.Construct = function (_a) {\r\n        var store = _a.store, meta = _a.meta, tags = _a.tags;\r\n        return new AdventLogger(store, meta, tags);\r\n    };\r\n    /**\r\n     *\r\n     * @param {string} message\r\n     * @param {object} meta\r\n     * @param {string[]} tags\r\n     */\r\n    AdventLogger.prototype.debug = function (message, meta, tags) {\r\n        this.log(\"debug\" /* debug */, message, meta, tags);\r\n    };\r\n    /**\r\n     *\r\n     * @param {string} message\r\n     * @param {object} meta\r\n     * @param {string[]} tags\r\n     */\r\n    AdventLogger.prototype.trace = function (message, meta, tags) {\r\n        this.log(\"trace\" /* trace */, message, meta, tags);\r\n    };\r\n    /**\r\n     *\r\n     * @param {string} message\r\n     * @param {object} meta\r\n     * @param {string[]} tags\r\n     */\r\n    AdventLogger.prototype.info = function (message, meta, tags) {\r\n        this.log(\"info\" /* info */, message, meta, tags);\r\n    };\r\n    /**\r\n     *\r\n     * @param {string} message\r\n     * @param {?object} meta\r\n     * @param {?string[]} tags\r\n     */\r\n    AdventLogger.prototype.warn = function (message, meta, tags) {\r\n        this.log(\"warn\" /* warn */, message, meta, tags);\r\n    };\r\n    /**\r\n     *\r\n     * @param {Error} err\r\n     * @param {string} message\r\n     * @param {?object} additionalMeta\r\n     * @param {?string[]} tags\r\n     */\r\n    AdventLogger.prototype.error = function (err, message, additionalMeta, tags) {\r\n        var meta = tslib_1.__assign({}, additionalMeta, { error: {\r\n                message: err.message,\r\n                stack: err.stack || err.toString()\r\n            } });\r\n        this.log(\"error\" /* error */, message, meta, tags);\r\n    };\r\n    /**\r\n     *\r\n     * @param {Error} err\r\n     * @param {string} message\r\n     * @param {?object} additionalMeta\r\n     * @param {?string[]} tags\r\n     */\r\n    AdventLogger.prototype.fatal = function (err, message, additionalMeta, tags) {\r\n        var meta = tslib_1.__assign({}, additionalMeta, { error: {\r\n                message: err.message,\r\n                name: err.name,\r\n                stack: err.stack || err.toString()\r\n            } });\r\n        this.log(\"fatal\" /* fatal */, message, meta, tags);\r\n    };\r\n    /**\r\n     *\r\n     * @param {object} meta\r\n     * @param {string[]} tags\r\n     */\r\n    AdventLogger.prototype.child = function (_a) {\r\n        var _b = _a.meta, meta = _b === void 0 ? {} : _b, _c = _a.tags, tags = _c === void 0 ? [] : _c;\r\n        return AdventLogger.Construct({\r\n            meta: tslib_1.__assign({}, this.meta, meta),\r\n            store: this.store,\r\n            tags: tslib_1.__spread(tags)\r\n        });\r\n    };\r\n    AdventLogger.prototype.log = function (level, message, meta, tags) {\r\n        if (meta === void 0) { meta = {}; }\r\n        if (tags === void 0) { tags = []; }\r\n        var event = AdventEvent.Construct({\r\n            level: level,\r\n            message: message,\r\n            meta: tslib_1.__assign({}, this.meta, meta),\r\n            tags: new Set(tslib_1.__spread(this.tags, tags))\r\n        });\r\n        this.store.addEvent(event);\r\n    };\r\n    return AdventLogger;\r\n}());\r\nexport { AdventLogger };\r\n","dtsmap":{"name":"/Users/justinbeaudry/Projects/advent/logger.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"logger.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"src/logger.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAe,UAAU,EAAE,MAAM,SAAS,CAAC;AAClD,OAAO,EAAE,gBAAgB,EAAE,MAAM,SAAS,CAAC;AAE3C,0BAAkB,kBAAkB;IAClC,KAAK,UAAU;IACf,KAAK,UAAU;IACf,IAAI,SAAS;IACb,IAAI,SAAS;IACb,KAAK,UAAU;IACf,KAAK,UAAU;CAChB;AAED,MAAM,WAAW,2BAA2B;IAC1C,KAAK,EAAE,gBAAgB,CAAC;IACxB,QAAQ,CAAC,IAAI,CAAC,EAAE,UAAU,CAAC;IAC3B,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC;CACjB;AAED,MAAM,WAAW,uBAAuB;IACtC,IAAI,EAAE,UAAU,CAAC;IACjB,IAAI,EAAE,MAAM,EAAE,CAAC;CAChB;AAED,qBAAa,YAAY;IACvB;;;;;;;OAOG;WACW,SAAS,CAAC,EACtB,KAAK,EACL,IAAI,EACJ,IAAI,EACL,EAAE,2BAA2B,GAAG,YAAY;IAG7C;;;OAGG;IACH,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAmB;IACzC;;;;;OAKG;IACH,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAkB;IACvC;;;;OAIG;IACH,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAgB;IACrC,OAAO;IAaP;;;;;OAKG;IACI,KAAK,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,UAAU,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,GAAG,IAAI;IAGvE;;;;;OAKG;IACI,KAAK,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,UAAU,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,GAAG,IAAI;IAGvE;;;;;OAKG;IACI,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,UAAU,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,GAAG,IAAI;IAGtE;;;;;OAKG;IACI,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,UAAU,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,GAAG,IAAI;IAGtE;;;;;;OAMG;IACI,KAAK,CAAC,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,cAAc,CAAC,EAAE,UAAU,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,GAAG,IAAI;IAU7F;;;;;;OAMG;IACI,KAAK,CAAC,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,cAAc,CAAC,EAAE,UAAU,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,GAAG,IAAI;IAY7F;;;;OAIG;IACI,KAAK,CAAC,EACX,IAAS,EACT,IAAS,EACV,EAAE,uBAAuB,GAAG,YAAY;IAOzC,OAAO,CAAC,GAAG;CAcZ\"}"},"dts":{"name":"/Users/justinbeaudry/Projects/advent/logger.d.ts","writeByteOrderMark":false,"text":"import { AdventMeta } from './event';\r\nimport { AdventEventStore } from './store';\r\nexport declare const enum AdventLoggerLevels {\r\n    debug = \"debug\",\r\n    trace = \"trace\",\r\n    info = \"info\",\r\n    warn = \"warn\",\r\n    error = \"error\",\r\n    fatal = \"fatal\"\r\n}\r\nexport interface AdventLoggerConstructParams {\r\n    store: AdventEventStore;\r\n    readonly meta?: AdventMeta;\r\n    tags?: string[];\r\n}\r\nexport interface AdventLoggerChildParams {\r\n    meta: AdventMeta;\r\n    tags: string[];\r\n}\r\nexport declare class AdventLogger {\r\n    /**\r\n     *\r\n     * @param {object} params\r\n     * @param {AdventEventStore} params.store\r\n     * @param {object} params.meta\r\n     * @param {string[]} params.tags\r\n     * @constructor\r\n     */\r\n    static Construct({ store, meta, tags }: AdventLoggerConstructParams): AdventLogger;\r\n    /**\r\n     * @description The Store of Events Dependency Injected into the constructor.\r\n     * @property {AdventEventStore} store\r\n     */\r\n    private readonly store;\r\n    /**\r\n     *\r\n     * @description Metadata to be passed to each Event instance generated\r\n     * during a log event.\r\n     * @property {AdventMeta} [meta={}]\r\n     */\r\n    private readonly meta;\r\n    /**\r\n     *\r\n     * @description String tags that are indexed when logging\r\n     * @property {string[]} tags\r\n     */\r\n    private readonly tags;\r\n    private constructor();\r\n    /**\r\n     *\r\n     * @param {string} message\r\n     * @param {object} meta\r\n     * @param {string[]} tags\r\n     */\r\n    debug(message: string, meta?: AdventMeta, tags?: string[]): void;\r\n    /**\r\n     *\r\n     * @param {string} message\r\n     * @param {object} meta\r\n     * @param {string[]} tags\r\n     */\r\n    trace(message: string, meta?: AdventMeta, tags?: string[]): void;\r\n    /**\r\n     *\r\n     * @param {string} message\r\n     * @param {object} meta\r\n     * @param {string[]} tags\r\n     */\r\n    info(message: string, meta?: AdventMeta, tags?: string[]): void;\r\n    /**\r\n     *\r\n     * @param {string} message\r\n     * @param {?object} meta\r\n     * @param {?string[]} tags\r\n     */\r\n    warn(message: string, meta?: AdventMeta, tags?: string[]): void;\r\n    /**\r\n     *\r\n     * @param {Error} err\r\n     * @param {string} message\r\n     * @param {?object} additionalMeta\r\n     * @param {?string[]} tags\r\n     */\r\n    error(err: Error, message: string, additionalMeta?: AdventMeta, tags?: string[]): void;\r\n    /**\r\n     *\r\n     * @param {Error} err\r\n     * @param {string} message\r\n     * @param {?object} additionalMeta\r\n     * @param {?string[]} tags\r\n     */\r\n    fatal(err: Error, message: string, additionalMeta?: AdventMeta, tags?: string[]): void;\r\n    /**\r\n     *\r\n     * @param {object} meta\r\n     * @param {string[]} tags\r\n     */\r\n    child({ meta, tags }: AdventLoggerChildParams): AdventLogger;\r\n    private log;\r\n}\r\n//# sourceMappingURL=logger.d.ts.map"}}
