{"code":"import * as tslib_1 from \"tslib\";\r\nimport { PausableInterval } from './pausableInterval';\r\nimport { AdventState } from './state';\r\nvar AdventEventSync = /** @class */ (function () {\r\n    function AdventEventSync(destinations, state, store) {\r\n        var e_1, _a;\r\n        var _this = this;\r\n        this.destinations = [];\r\n        this.store = store;\r\n        this.state = state;\r\n        var _loop_1 = function (dest) {\r\n            this_1.destinations.push(PausableInterval.Constructor({\r\n                fn: function () {\r\n                    _this.sync(dest.transport);\r\n                },\r\n                rate: dest.rate\r\n            }));\r\n        };\r\n        var this_1 = this;\r\n        try {\r\n            for (var destinations_1 = tslib_1.__values(destinations), destinations_1_1 = destinations_1.next(); !destinations_1_1.done; destinations_1_1 = destinations_1.next()) {\r\n                var dest = destinations_1_1.value;\r\n                _loop_1(dest);\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (destinations_1_1 && !destinations_1_1.done && (_a = destinations_1.return)) _a.call(destinations_1);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n    }\r\n    AdventEventSync.Construct = function (_a) {\r\n        var destinations = _a.destinations, state = _a.state, store = _a.store;\r\n        return new AdventEventSync(destinations, state, store);\r\n    };\r\n    AdventEventSync.prototype.start = function () {\r\n        var e_2, _a;\r\n        try {\r\n            for (var _b = tslib_1.__values(this.destinations), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var dest = _c.value;\r\n                dest.start();\r\n            }\r\n        }\r\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_2) throw e_2.error; }\r\n        }\r\n    };\r\n    AdventEventSync.prototype.pause = function () {\r\n        var e_3, _a;\r\n        try {\r\n            for (var _b = tslib_1.__values(this.destinations), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var dest = _c.value;\r\n                dest.pause();\r\n            }\r\n        }\r\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_3) throw e_3.error; }\r\n        }\r\n    };\r\n    AdventEventSync.prototype.configure = function (state) {\r\n        this.state = AdventState(state, this.state);\r\n    };\r\n    AdventEventSync.prototype.sync = function (transport) {\r\n        var e_4, _a;\r\n        var predicate = function (item) { return !item.seen; };\r\n        try {\r\n            for (var _b = tslib_1.__values(this.store.getEvents(predicate)), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var event_1 = _c.value;\r\n                transport.write(event_1, this.state.level);\r\n                this.store.markEventSeen(event_1.id);\r\n            }\r\n        }\r\n        catch (e_4_1) { e_4 = { error: e_4_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_4) throw e_4.error; }\r\n        }\r\n    };\r\n    return AdventEventSync;\r\n}());\r\nexport { AdventEventSync };\r\n","dtsmap":{"name":"/Users/justinbeaudry/Projects/advent/sync.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"sync.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"src/sync.ts\"],\"names\":[],\"mappings\":\"AACA,OAAO,EAAE,WAAW,EAAE,MAAM,SAAS,CAAC;AACtC,OAAO,EAAE,gBAAgB,EAAwB,MAAM,SAAS,CAAC;AACjE,OAAO,EAAE,eAAe,EAAE,MAAM,aAAa,CAAC;AAE9C,MAAM,WAAW,8BAA8B;IAC7C,KAAK,EAAE,WAAW,CAAC;IACnB,KAAK,EAAE,gBAAgB,CAAC;IACxB,YAAY,EAAE,8BAA8B,EAAE,CAAA;CAC/C;AAED,MAAM,WAAW,8BAA8B;IAC7C,SAAS,EAAE,eAAe,CAAC;IAC3B,IAAI,EAAE,MAAM,CAAC;CACd;AAED,qBAAa,eAAe;WACZ,SAAS,CAAC,EACtB,YAAY,EACZ,KAAK,EACL,KAAK,EACN,EAAE,8BAA8B;IAGjC,OAAO,CAAC,QAAQ,CAAC,YAAY,CAA0B;IACvD,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAmB;IACzC,OAAO,CAAC,KAAK,CAAc;IAC3B,OAAO;IAkBA,KAAK,IAAI,IAAI;IAKb,KAAK,IAAI,IAAI;IAKb,SAAS,CAAC,KAAK,EAAE,WAAW,GAAG,IAAI;IAG1C,OAAO,CAAC,IAAI;CAOb\"}"},"dts":{"name":"/Users/justinbeaudry/Projects/advent/sync.d.ts","writeByteOrderMark":false,"text":"import { AdventState } from './state';\r\nimport { AdventEventStore } from './store';\r\nimport { AdventTransport } from './transport';\r\nexport interface AdventEventSyncConstructParams {\r\n    state: AdventState;\r\n    store: AdventEventStore;\r\n    destinations: AdventDestinationConfiguration[];\r\n}\r\nexport interface AdventDestinationConfiguration {\r\n    transport: AdventTransport;\r\n    rate: number;\r\n}\r\nexport declare class AdventEventSync {\r\n    static Construct({ destinations, state, store }: AdventEventSyncConstructParams): AdventEventSync;\r\n    private readonly destinations;\r\n    private readonly store;\r\n    private state;\r\n    private constructor();\r\n    start(): void;\r\n    pause(): void;\r\n    configure(state: AdventState): void;\r\n    private sync;\r\n}\r\n//# sourceMappingURL=sync.d.ts.map"}}
