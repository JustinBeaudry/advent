{"code":"import moment from 'moment';\r\n/**\r\n *\r\n * @description\r\n * @name AdventEvent\r\n */\r\nvar AdventEvent = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {AdventLoggerLevels} level\r\n     * @param {AdventMessage?} message\r\n     * @param {AdventMeta} meta\r\n     * @param {AdventTags} tags\r\n     * @param {AdventDatetime} datetime\r\n     * @constructor\r\n     */\r\n    function AdventEvent(level, message, meta, tags, datetime) {\r\n        if (meta === void 0) { meta = {}; }\r\n        if (tags === void 0) { tags = new Set(); }\r\n        if (datetime === void 0) { datetime = moment(); }\r\n        this.level = level;\r\n        this.message = message;\r\n        this.meta = meta;\r\n        this.tags = tags;\r\n        this.datetime = datetime;\r\n        this[Symbol.toStringTag] = 'AdventEvent';\r\n        this.id = uuid.v4();\r\n    }\r\n    /**\r\n     *\r\n     * @param {AdventEventConstructParams} params\r\n     * @constructor\r\n     */\r\n    AdventEvent.Construct = function (_a) {\r\n        var level = _a.level, tags = _a.tags, meta = _a.meta, datetime = _a.datetime, message = _a.message;\r\n        return new AdventEvent(level, message, meta, tags, datetime);\r\n    };\r\n    /**\r\n     *\r\n     * @param {boolean} asNumber\r\n     * @return {(string|number)}\r\n     */\r\n    AdventEvent.prototype.delta = function (asNumber) {\r\n        if (asNumber === void 0) { asNumber = false; }\r\n        if (asNumber) {\r\n            return Math.floor(moment().unix() - this.datetime.unix());\r\n        }\r\n        return this.datetime.fromNow();\r\n    };\r\n    // noinspection JSUnusedLocalSymbols\r\n    /**\r\n     *\r\n     * @private\r\n     * @return {{meta: object, message: string}}\r\n     */\r\n    // @ts-ignore\r\n    AdventEvent.prototype.toJSON = function () {\r\n        var _a = this, id = _a.id, datetime = _a.datetime, level = _a.level, message = _a.message, meta = _a.meta, tags = _a.tags;\r\n        return {\r\n            datetime: datetime,\r\n            delta: this.delta(),\r\n            id: id,\r\n            level: level,\r\n            message: message,\r\n            meta: meta,\r\n            tags: Array.from(tags)\r\n        };\r\n    };\r\n    AdventEvent.prototype.generateUUID = function () {\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            /* tslint:disable */\r\n            var r = parseFloat('0.' + Math.random().toString().replace('0.', '') + new Date().getTime()) * 16 | 0;\r\n            var v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n            /* tslint:enable */\r\n            return v.toString(16);\r\n        });\r\n    };\r\n    return AdventEvent;\r\n}());\r\nexport { AdventEvent };\r\n","dtsmap":{"name":"/Users/justinbeaudry/Projects/advent/event.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"event.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"src/event.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAe,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AACxC,OAAO,EAAE,kBAAkB,EAAE,MAAM,UAAU,CAAC;AAE9C,oBAAY,aAAa,GAAG,MAAM,CAAC;AACnC,oBAAY,cAAc,GAAG,MAAM,CAAC;AAGpC,oBAAY,UAAU,GAAG,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC;AAChE,oBAAY,UAAU,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;AAErC,MAAM,WAAW,0BAA0B;IACzC,QAAQ,CAAC,QAAQ,CAAC,EAAE,cAAc,CAAC;IACnC,QAAQ,CAAC,KAAK,EAAE,kBAAkB,CAAC;IACnC,QAAQ,CAAC,OAAO,EAAE,aAAa,CAAC;IAChC,QAAQ,CAAC,IAAI,CAAC,EAAE,UAAU,CAAC;IAC3B,QAAQ,CAAC,IAAI,EAAE,UAAU,CAAC;CAC3B;AAED,MAAM,WAAW,WAAW;IAC1B,QAAQ,CAAC,QAAQ,EAAE,cAAc,CAAC;IAClC,QAAQ,CAAC,EAAE,EAAE,MAAM,CAAC;IACpB,QAAQ,CAAC,KAAK,EAAE,kBAAkB,CAAC;IACnC,QAAQ,CAAC,OAAO,EAAE,aAAa,CAAC;IAChC,QAAQ,CAAC,IAAI,EAAE,UAAU,CAAC;IAC1B,QAAQ,CAAC,IAAI,EAAE,UAAU,CAAC;IAC1B,KAAK,CAAC,QAAQ,EAAE,OAAO,GAAG,MAAM,CAAC;IACjC,KAAK,IAAI,MAAM,CAAC;CACjB;AACD;;;;GAIG;AACH,qBAAa,WAAY,YAAW,WAAW;IA2B3C,QAAQ,CAAC,KAAK,EAAE,kBAAkB;IAClC,QAAQ,CAAC,OAAO,EAAE,aAAa;IAC/B,QAAQ,CAAC,IAAI,EAAE,UAAU;IACzB,QAAQ,CAAC,IAAI,EAAE,UAAU;IACzB,QAAQ,CAAC,QAAQ,EAAE,cAAc;IA9BnC;;;;OAIG;WACW,SAAS,CAAC,EACtB,KAAK,EACL,IAAI,EACJ,IAAI,EACJ,QAAQ,EACR,OAAO,EACR,EAAE,0BAA0B,GAAG,WAAW;IAGpC,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,MAAM,CAAiB;IACpD,SAAgB,EAAE,EAAE,MAAM,CAAa;IACvC;;;;;;;;OAQG;IACH,OAAO;IAoBP;;;;OAIG;IAEH,OAAO,CAAC,MAAM;IAYd,OAAO,CAAC,YAAY;CASrB\"}"},"dts":{"name":"/Users/justinbeaudry/Projects/advent/event.d.ts","writeByteOrderMark":false,"text":"import { Moment } from 'moment';\r\nimport { AdventLoggerLevels } from './logger';\r\nexport declare type AdventMessage = string;\r\nexport declare type AdventDatetime = Moment;\r\nexport declare type AdventMeta = Record<string, Exclude<any, Function>>;\r\nexport declare type AdventTags = Set<string>;\r\nexport interface AdventEventConstructParams {\r\n    readonly datetime?: AdventDatetime;\r\n    readonly level: AdventLoggerLevels;\r\n    readonly message: AdventMessage;\r\n    readonly meta?: AdventMeta;\r\n    readonly tags: AdventTags;\r\n}\r\nexport interface AdventEvent {\r\n    readonly datetime: AdventDatetime;\r\n    readonly id: string;\r\n    readonly level: AdventLoggerLevels;\r\n    readonly message: AdventMessage;\r\n    readonly meta: AdventMeta;\r\n    readonly tags: AdventTags;\r\n    delta(asNumber: boolean): number;\r\n    delta(): string;\r\n}\r\n/**\r\n *\r\n * @description\r\n * @name AdventEvent\r\n */\r\nexport declare class AdventEvent implements AdventEvent {\r\n    readonly level: AdventLoggerLevels;\r\n    readonly message: AdventMessage;\r\n    readonly meta: AdventMeta;\r\n    readonly tags: AdventTags;\r\n    readonly datetime: AdventDatetime;\r\n    /**\r\n     *\r\n     * @param {AdventEventConstructParams} params\r\n     * @constructor\r\n     */\r\n    static Construct({ level, tags, meta, datetime, message }: AdventEventConstructParams): AdventEvent;\r\n    [Symbol.toStringTag]: string;\r\n    readonly id: string;\r\n    /**\r\n     *\r\n     * @param {AdventLoggerLevels} level\r\n     * @param {AdventMessage?} message\r\n     * @param {AdventMeta} meta\r\n     * @param {AdventTags} tags\r\n     * @param {AdventDatetime} datetime\r\n     * @constructor\r\n     */\r\n    private constructor();\r\n    /**\r\n     *\r\n     * @private\r\n     * @return {{meta: object, message: string}}\r\n     */\r\n    private toJSON;\r\n    private generateUUID;\r\n}\r\n//# sourceMappingURL=event.d.ts.map"}}
